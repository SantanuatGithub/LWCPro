"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const babel = __importStar(require("@babel/core"));
const babel_preset_minify_1 = __importDefault(require("babel-preset-minify"));
const babel_plugins_1 = require("../babel-plugins");
exports.MINIFY_CONFIG = Object.assign({
    comments: false,
}, babel_plugins_1.BABEL_CONFIG_BASE, {
    presets: [[babel_preset_minify_1.default, { guards: false, evaluate: false }]],
});
/**
 * Rollup plugin applying minification to the generated bundle.
 */
function default_1({ sourcemap }) {
    const config = Object.assign({}, exports.MINIFY_CONFIG, { sourceMaps: sourcemap });
    return {
        name: 'lwc-minify',
        transformBundle(src) {
            const { code, map } = babel.transform(src, config);
            return { code, map };
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=minify.js.map
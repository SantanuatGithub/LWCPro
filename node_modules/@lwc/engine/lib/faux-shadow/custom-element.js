"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const shadow_root_1 = require("./shadow-root");
const events_1 = require("./events");
const traverse_1 = require("./traverse");
const element_1 = require("../env/element");
const language_1 = require("../shared/language");
const focus_1 = require("./focus");
const static_node_list_1 = require("../shared/static-node-list");
const static_html_collection_1 = require("../shared/static-html-collection");
const node_1 = require("./node");
function PatchedCustomElement(Base) {
    const Ctor = traverse_1.PatchedElement(Base);
    return class PatchedHTMLElement extends Ctor {
        attachShadow(options) {
            return shadow_root_1.attachShadow(this, options);
        }
        addEventListener(type, listener, options) {
            events_1.addCustomElementEventListener(this, type, listener, options);
        }
        removeEventListener(type, listener, options) {
            events_1.removeCustomElementEventListener(this, type, listener, options);
        }
        get shadowRoot() {
            const shadow = shadow_root_1.getShadowRoot(this);
            if (shadow.mode === 'open') {
                return shadow;
            }
            return null;
        }
        get tabIndex() {
            if (shadow_root_1.isDelegatingFocus(this) && language_1.isFalse(element_1.hasAttribute.call(this, 'tabindex'))) {
                // this cover the case where the default tabindex should be 0 because the
                // custom element is delegating its focus
                return 0;
            }
            // NOTE: Technically this should be `super.tabIndex` however Typescript
            // has a known bug while transpiling down to ES5
            // https://github.com/Microsoft/TypeScript/issues/338
            const descriptor = language_1.getPropertyDescriptor(Ctor.prototype, 'tabIndex');
            return descriptor.get.call(this);
        }
        set tabIndex(value) {
            // This tabIndex setter might be confusing unless it is understood that HTML elements
            // have default tabIndex property values. Natively focusable elements have a default
            // tabIndex value of 0 and all other elements have a default tabIndex value of -1. An
            // example of when this matters: We don't need to do anything for <x-foo> but we do need
            // to add a listener for <x-foo tabindex="-1">. The tabIndex property value is -1 in
            // both cases, so we need an additional check to see if the tabindex attribute is
            // reflected on the host.
            const delegatesFocus = shadow_root_1.isDelegatingFocus(this);
            // Record the state of things before invoking component setter.
            const prevValue = element_1.tabIndexGetter.call(this);
            const prevHasAttr = element_1.hasAttribute.call(this, 'tabindex');
            // NOTE: Technically this should be `super.tabIndex` however Typescript
            // has a known bug while transpiling down to ES5
            // https://github.com/Microsoft/TypeScript/issues/338
            const descriptor = language_1.getPropertyDescriptor(Ctor.prototype, 'tabIndex');
            descriptor.set.call(this, value);
            // Record the state of things after invoking component setter.
            const currValue = element_1.tabIndexGetter.call(this);
            const currHasAttr = element_1.hasAttribute.call(this, 'tabindex');
            const didValueChange = prevValue !== currValue;
            // If the tabindex attribute is initially rendered, we can assume that this setter has
            // previously executed and a listener has been added. We must remove that listener if
            // the tabIndex property value has changed or if the component no longer renders a
            // tabindex attribute.
            if (prevHasAttr && (didValueChange || language_1.isFalse(currHasAttr))) {
                if (prevValue === -1) {
                    focus_1.ignoreFocusIn(this);
                }
                if (prevValue === 0 && delegatesFocus) {
                    focus_1.ignoreFocus(this);
                }
            }
            // If a tabindex attribute was not rendered after invoking its setter, it means the
            // component is taking control. Do nothing.
            if (language_1.isFalse(currHasAttr)) {
                return;
            }
            // If the tabindex attribute is initially rendered, we can assume that this setter has
            // previously executed and a listener has been added. If the tabindex attribute is still
            // rendered after invoking the setter AND the tabIndex property value has not changed,
            // we don't need to do any work.
            if (prevHasAttr && currHasAttr && language_1.isFalse(didValueChange)) {
                return;
            }
            // At this point we know that a tabindex attribute was rendered after invoking the
            // setter and that either:
            // 1) This is the first time this setter is being invoked.
            // 2) This is not the first time this setter is being invoked and the value is changing.
            // We need to add the appropriate listeners in either case.
            if (currValue === -1) {
                // Add the magic to skip the shadow tree
                focus_1.handleFocusIn(this);
            }
            if (currValue === 0 && delegatesFocus) {
                // Add the magic to skip the host element
                focus_1.handleFocus(this);
            }
        }
        blur() {
            if (shadow_root_1.isDelegatingFocus(this)) {
                const currentActiveElement = focus_1.getActiveElement(this);
                if (!language_1.isNull(currentActiveElement)) {
                    // if there is an active element, blur it
                    currentActiveElement.blur();
                    return;
                }
            }
            super.blur();
        }
        get childNodes() {
            const owner = traverse_1.getNodeOwner(this);
            const childNodes = language_1.isNull(owner)
                ? []
                : traverse_1.getAllMatches(owner, traverse_1.getFilteredChildNodes(this));
            if (process.env.NODE_ENV !== 'production' &&
                language_1.isFalse(node_1.hasNativeSymbolsSupport) &&
                node_1.isExternalChildNodeAccessorFlagOn()) {
                // inserting a comment node as the first childNode to trick the IE11
                // DevTool to show the content of the shadowRoot, this should only happen
                // in dev-mode and in IE11 (which we detect by looking at the symbol).
                // Plus it should only be in place if we know it is an external invoker.
                language_1.ArrayUnshift.call(childNodes, shadow_root_1.getIE11FakeShadowRootPlaceholder(this));
            }
            return static_node_list_1.createStaticNodeList(childNodes);
        }
        get children() {
            // We cannot patch `children` in test mode
            // because JSDOM uses children for its "native"
            // querySelector implementation. If we patch this,
            // HTMLElement.prototype.querySelector.call(element) will not
            // return any elements from shadow, which is not what we want
            if (process.env.NODE_ENV === 'test') {
                return element_1.childrenGetter.call(this);
            }
            const owner = traverse_1.getNodeOwner(this);
            const childNodes = language_1.isNull(owner)
                ? []
                : traverse_1.getAllMatches(owner, traverse_1.getFilteredChildNodes(this));
            return static_html_collection_1.createStaticHTMLCollection(language_1.ArrayFilter.call(childNodes, (node) => node instanceof Element));
        }
    };
}
exports.PatchedCustomElement = PatchedCustomElement;
//# sourceMappingURL=custom-element.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const assert_1 = __importDefault(require("../../shared/assert"));
const invoker_1 = require("../invoker");
const language_1 = require("../../shared/language");
const watcher_1 = require("../watcher");
const vm_1 = require("../vm");
const language_2 = require("../../shared/language");
const membrane_1 = require("../membrane");
const register_1 = require("./register");
function api(target, propName, descriptor) {
    if (process.env.NODE_ENV !== 'production') {
        if (arguments.length !== 3) {
            assert_1.default.fail(`@api decorator can only be used as a decorator function.`);
        }
    }
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.invariant(!descriptor || (language_2.isFunction(descriptor.get) || language_2.isFunction(descriptor.set)), `Invalid property ${language_1.toString(propName)} definition in ${target}, it cannot be a prototype definition if it is a public property. Instead use the constructor to define it.`);
        if (language_1.isObject(descriptor) && language_2.isFunction(descriptor.set)) {
            assert_1.default.isTrue(language_1.isObject(descriptor) && language_2.isFunction(descriptor.get), `Missing getter for property ${language_1.toString(propName)} decorated with @api in ${target}. You cannot have a setter without the corresponding getter.`);
        }
    }
    const meta = register_1.getDecoratorsRegisteredMeta(target);
    // initializing getters and setters for each public prop on the target prototype
    if (language_1.isObject(descriptor) && (language_2.isFunction(descriptor.get) || language_2.isFunction(descriptor.set))) {
        // if it is configured as an accessor it must have a descriptor
        // @ts-ignore it must always be set before calling this method
        meta.props[propName].config = language_2.isFunction(descriptor.set) ? 3 : 1;
        return createPublicAccessorDescriptor(target, propName, descriptor);
    }
    else {
        // @ts-ignore it must always be set before calling this method
        meta.props[propName].config = 0;
        return createPublicPropertyDescriptor(target, propName, descriptor);
    }
}
exports.default = api;
let vmBeingUpdated = null;
function prepareForPropUpdate(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && 'cmpRoot' in vm, `${vm} is not a vm.`);
    }
    vmBeingUpdated = vm;
}
exports.prepareForPropUpdate = prepareForPropUpdate;
function createPublicPropertyDescriptor(proto, key, descriptor) {
    return {
        get() {
            const vm = vm_1.getComponentVM(this);
            if (process.env.NODE_ENV !== 'production') {
                assert_1.default.isTrue(vm && 'cmpRoot' in vm, `${vm} is not a vm.`);
            }
            if (invoker_1.isBeingConstructed(vm)) {
                if (process.env.NODE_ENV !== 'production') {
                    assert_1.default.logError(`${vm} constructor should not read the value of property "${language_1.toString(key)}". The owner component has not yet set the value. Instead use the constructor to set default values for properties.`, vm.elm);
                }
                return;
            }
            watcher_1.observeMutation(this, key);
            return vm.cmpProps[key];
        },
        set(newValue) {
            const vm = vm_1.getComponentVM(this);
            if (process.env.NODE_ENV !== 'production') {
                assert_1.default.isTrue(vm && 'cmpRoot' in vm, `${vm} is not a vm.`);
                assert_1.default.invariant(!invoker_1.isRendering, `${invoker_1.vmBeingRendered}.render() method has side effects on the state of ${vm}.${language_1.toString(key)}`);
            }
            if (language_1.isTrue(vm.isRoot) || invoker_1.isBeingConstructed(vm)) {
                vmBeingUpdated = vm;
                if (process.env.NODE_ENV !== 'production') {
                    // reactiveMembrane.getProxy(newValue) will return a different value (proxy)
                    // Then newValue if newValue is observable (plain object or array)
                    const isObservable = membrane_1.reactiveMembrane.getProxy(newValue) !== newValue;
                    if (!isObservable && !language_1.isNull(newValue) && language_1.isObject(newValue)) {
                        assert_1.default.logWarning(`Assigning a non-reactive value ${newValue} to member property ${language_1.toString(key)} of ${vm} is not common because mutations on that value cannot be observed.`, vm.elm);
                    }
                }
            }
            if (process.env.NODE_ENV !== 'production') {
                if (vmBeingUpdated !== vm) {
                    // logic for setting new properties of the element directly from the DOM
                    // is only recommended for root elements created via createElement()
                    assert_1.default.logWarning(`If property ${language_1.toString(key)} decorated with @api in ${vm} is used in the template, the value ${language_1.toString(newValue)} set manually may be overridden by the template, consider binding the property only in the template.`, vm.elm);
                }
            }
            vmBeingUpdated = null; // releasing the lock
            // not need to wrap or check the value since that is happening somewhere else
            vm.cmpProps[key] = membrane_1.reactiveMembrane.getReadOnlyProxy(newValue);
            // avoid notification of observability if the instance is already dirty
            if (language_1.isFalse(vm.isDirty)) {
                // perf optimization to skip this step if the component is dirty already.
                watcher_1.notifyMutation(this, key);
            }
        },
        enumerable: language_2.isUndefined(descriptor) ? true : descriptor.enumerable,
    };
}
function createPublicAccessorDescriptor(Ctor, key, descriptor) {
    const { get, set, enumerable } = descriptor;
    if (!language_2.isFunction(get)) {
        if (process.env.NODE_ENV !== 'production') {
            assert_1.default.fail(`Invalid attempt to create public property descriptor ${language_1.toString(key)} in ${Ctor}. It is missing the getter declaration with @api get ${language_1.toString(key)}() {} syntax.`);
        }
        throw new TypeError();
    }
    return {
        get() {
            if (process.env.NODE_ENV !== 'production') {
                const vm = vm_1.getComponentVM(this);
                assert_1.default.isTrue(vm && 'cmpRoot' in vm, `${vm} is not a vm.`);
            }
            return get.call(this);
        },
        set(newValue) {
            const vm = vm_1.getComponentVM(this);
            if (process.env.NODE_ENV !== 'production') {
                assert_1.default.isTrue(vm && 'cmpRoot' in vm, `${vm} is not a vm.`);
                assert_1.default.invariant(!invoker_1.isRendering, `${invoker_1.vmBeingRendered}.render() method has side effects on the state of ${vm}.${language_1.toString(key)}`);
            }
            if (vm.isRoot || invoker_1.isBeingConstructed(vm)) {
                vmBeingUpdated = vm;
                if (process.env.NODE_ENV !== 'production') {
                    // reactiveMembrane.getProxy(newValue) will return a different value (proxy)
                    // Then newValue if newValue is observable (plain object or array)
                    const isObservable = membrane_1.reactiveMembrane.getProxy(newValue) !== newValue;
                    if (!isObservable && !language_1.isNull(newValue) && language_1.isObject(newValue)) {
                        assert_1.default.logWarning(`Assigning a non-reactive value ${newValue} to member property ${language_1.toString(key)} of ${vm} is not common because mutations on that value cannot be observed.`, vm.elm);
                    }
                }
            }
            if (process.env.NODE_ENV !== 'production') {
                if (vmBeingUpdated !== vm) {
                    // logic for setting new properties of the element directly from the DOM
                    // is only recommended for root elements created via createElement()
                    assert_1.default.logWarning(`If property ${language_1.toString(key)} decorated with @api in ${vm} is used in the template, the value ${language_1.toString(newValue)} set manually may be overridden by the template, consider binding the property only in the template.`, vm.elm);
                }
            }
            vmBeingUpdated = null; // releasing the lock
            // not need to wrap or check the value since that is happening somewhere else
            if (set) {
                set.call(this, membrane_1.reactiveMembrane.getReadOnlyProxy(newValue));
            }
            else if (process.env.NODE_ENV !== 'production') {
                assert_1.default.fail(`Invalid attempt to set a new value for property ${language_1.toString(key)} of ${vm} that does not has a setter decorated with @api.`);
            }
        },
        enumerable,
    };
}
//# sourceMappingURL=api.js.map
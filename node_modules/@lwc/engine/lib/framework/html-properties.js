"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const language_1 = require("../shared/language");
const attributes_1 = require("./attributes");
const main_1 = require("../polyfills/aria-properties/main");
// Initialization Routines
require("../polyfills/document-shadow/main");
require("../polyfills/shadow-root/main");
require("../polyfills/proxy-concat/main");
require("../polyfills/click-event-composed/main"); // must come before event-composed
require("../polyfills/event-composed/main");
require("../polyfills/custom-event-composed/main");
require("../polyfills/focus-event-composed/main");
require("../polyfills/aria-properties/main");
/**
 * This is a descriptor map that contains
 * all standard properties that a Custom Element can support (including AOM properties), which
 * determines what kind of capabilities the Base HTML Element and
 * Base Lightning Element should support.
 */
exports.HTMLElementOriginalDescriptors = language_1.create(null);
language_1.forEach.call(main_1.ElementPrototypeAriaPropertyNames, (propName) => {
    // Note: intentionally using our in-house getPropertyDescriptor instead of getOwnPropertyDescriptor here because
    // in IE11, some properties are on Element.prototype instead of HTMLElement, just to be sure.
    const descriptor = language_1.getPropertyDescriptor(HTMLElement.prototype, propName);
    if (!language_1.isUndefined(descriptor)) {
        exports.HTMLElementOriginalDescriptors[propName] = descriptor;
    }
});
language_1.forEach.call(attributes_1.defaultDefHTMLPropertyNames, propName => {
    // Note: intentionally using our in-house getPropertyDescriptor instead of getOwnPropertyDescriptor here because
    // in IE11, id property is on Element.prototype instead of HTMLElement, and we suspect that more will fall into
    // this category, so, better to be sure.
    const descriptor = language_1.getPropertyDescriptor(HTMLElement.prototype, propName);
    if (!language_1.isUndefined(descriptor)) {
        exports.HTMLElementOriginalDescriptors[propName] = descriptor;
    }
});
//# sourceMappingURL=html-properties.js.map
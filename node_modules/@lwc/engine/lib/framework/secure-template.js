"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const signedTemplateSet = new Set();
function defaultEmptyTemplate() {
    return [];
}
exports.defaultEmptyTemplate = defaultEmptyTemplate;
signedTemplateSet.add(defaultEmptyTemplate);
function isTemplateRegistered(tpl) {
    return signedTemplateSet.has(tpl);
}
exports.isTemplateRegistered = isTemplateRegistered;
// chaining this method as a way to wrap existing
// assignment of templates easily, without too much transformation
function registerTemplate(tpl) {
    signedTemplateSet.add(tpl);
    return tpl;
}
exports.registerTemplate = registerTemplate;
// locker-service patches this function during runtime to sanitize vulnerable attributes.
// when ran off-core this function becomes a noop and returns the user authored value.
function sanitizeAttribute(tagName, namespaceUri, attrName, attrValue) {
    return attrValue;
}
exports.sanitizeAttribute = sanitizeAttribute;
//# sourceMappingURL=secure-template.js.map
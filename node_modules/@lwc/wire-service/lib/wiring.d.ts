import { CONTEXT_ID, CONTEXT_CONNECTED, CONTEXT_DISCONNECTED, CONTEXT_UPDATED } from './constants';
import { LightningElement, ElementDef, WireDef } from './engine';
export declare type NoArgumentListener = () => void;
export interface ConfigListenerArgument {
    [key: string]: any;
}
export declare type ConfigListener = (ConfigListenerArgument: any) => void;
export interface ReactiveParameter {
    reference: string;
    head: string;
    tail?: string[];
}
export interface ConfigListenerMetadata {
    listener: ConfigListener;
    statics?: {
        [key: string]: any;
    };
    reactives?: {
        [key: string]: string;
    };
}
export interface ConfigContext {
    listeners: {
        [key: string]: ConfigListenerMetadata[];
    };
    values: {
        [key: string]: any;
    };
    mutated?: Set<ReactiveParameter>;
}
export interface WireContext {
    [CONTEXT_CONNECTED]: NoArgumentListener[];
    [CONTEXT_DISCONNECTED]: NoArgumentListener[];
    [CONTEXT_UPDATED]: ConfigContext;
}
export interface Context {
    [CONTEXT_ID]: WireContext;
}
export declare type WireEventTargetListener = NoArgumentListener | ConfigListener;
export declare class WireEventTarget {
    _cmp: LightningElement;
    _def: ElementDef;
    _context: Context;
    _wireDef: WireDef;
    _wireTarget: string;
    constructor(cmp: LightningElement, def: ElementDef, context: Context, wireDef: WireDef, wireTarget: string);
    addEventListener(type: string, listener: WireEventTargetListener): void;
    removeEventListener(type: string, listener: WireEventTargetListener): void;
    dispatchEvent(evt: ValueChangedEvent): boolean;
}
/**
 * Event fired by wire adapters to emit a new value.
 */
export declare class ValueChangedEvent {
    value: any;
    type: string;
    constructor(value: any);
}
